-- CREATING DATABASE

CREATE DATABASE pizza_sales;
USE pizza_sales;

-- CREATING TABLES 

-- CUSTOMERS TABLE
CREATE TABLE Customers (
    CustomerID INT PRIMARY KEY,
    FirstName VARCHAR(50) NOT NULL,
    LastName VARCHAR(50) NOT NULL,
    Email VARCHAR(100) NOT NULL UNIQUE,
    PhoneNumber VARCHAR(20),
    Address VARCHAR(100),
    City VARCHAR(50),
    State CHAR(2),
    ZipCode VARCHAR(10),
    JoinDate DATE
);

-- PIZZAS TABLE
CREATE TABLE Pizzas (
    PizzaID INT PRIMARY KEY,
    Name VARCHAR(50) NOT NULL,
    Size VARCHAR(20) NOT NULL,
    Price DECIMAL(10, 2) NOT NULL,
    Category VARCHAR(20) NOT NULL
);
-- ORDERS TABLE
CREATE TABLE Orders (
    OrderID INT PRIMARY KEY,
    CustomerID INT NOT NULL,
    OrderDate DATE NOT NULL,
    TotalAmount DECIMAL(10, 2) NOT NULL,
    DeliveryAddress VARCHAR(100),
    Status VARCHAR(20),
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)
);

-- ordersItems table
CREATE TABLE OrderItems (
    OrderID INT NOT NULL,
    PizzaID INT NOT NULL,
    Quantity INT NOT NULL,
    Price DECIMAL(10, 2) NOT NULL,
    PRIMARY KEY ( OrderID, PizzaID),
    FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
    FOREIGN KEY (PizzaID) REFERENCES Pizzas(PizzaID)    
);

-- IMPORTED DATA FROM CSV FILES THROUGH  IMPORT WIZARD

-- DATA EXPLORATION 
-- How many customers we have??

SELECT count(*) AS Cust_count FROM customers;

-- What types of pizzas & pizzas  category we have ??

SELECT Name,Category FROM pizzas
ORDER BY Category;
 
-- WHAT ARE THE ORDER COUNT??

SELECT count(orderid) AS Order_Count
FROM orders;

-- Analysis Qustions 
-- Q1: Retrieve the names and email addresses of all customers from the Customers table.

SELECT FirstName,LastName, Email FROM customers;

-- Q2: Find all orders with a total amount greater than $150. Include FirstName ,LastName,OrderID, CustomerID, and TotalAmount in the results.

SELECT 
	ord.CustomerID, FirstName ,LastName,ord.OrderID, ord.TotalAmount 
FROM orders AS ord
JOIN customers AS cst
ON ord.CustomerID = cst.CustomerID
WHERE TotalAmount > 150;

-- Q3: Calculate the total revenue generated for each customer where the total order is greater than 4. Include CustomerID, TotalOrders, and TotalRevenue in the results.

SELECT 
	CustomerID,count(OrderID)AS total_orders,
    sum(TotalAmount)AS Total_revenue 
    FROM orders
GROUP BY CustomerID
HAVING total_orders > 4;

-- Q4: Find the average price of pizzas in each category. Include Category and AveragePrice in the results.


SELECT  Category, avg(price) AS avg_price FROM pizzas
GROUP BY Category;

--  Q5: Calculate the total revenue and total quantity for each type of pizza. Include the pizza name, size, category, Total revenue generated and Total quantity sold by each pizza type.

SELECT 
    P.Name,
    P.Size,
    p.category ,
    SUM(P.Price) AS TotalRevenue,
    SUM(oi.Quantity) AS TotalQuantity
FROM OrderItems AS oi
JOIN
    Pizzas AS P ON oi.PizzaID = P.PizzaID
GROUP BY 
	P.Name , P.Size ,p.category , P.Price;


-- Q6: Retrieve the highest priced pizza in each category. Include Category, PizzaName, and Price in the results.

SELECT p.Category, 
       p.Name AS PizzaName, 
       p.Price
FROM Pizzas p
JOIN (
    SELECT Category, 
           MAX(Price) AS MaxPrice
    FROM Pizzas
    GROUP BY Category
) max_p
ON p.Category = max_p.Category AND p.Price = max_p.MaxPrice;

-- Q7: Find the total revenue generated by month for the current year. Include Month and TotalRevenue in the results.

SELECT 
    MONTHNAME(OrderDate) AS CY_Month,
    SUM(TotalAmount) AS TotalRevenue
FROM orders
WHERE YEAR(orderdate) = 2024
GROUP BY CY_Month;

-- Q8: Determine the average time between orders for each customer. Assume each order is placed on the same day and calculate the average days between consecutive orders.

SELECT CustomerID,
       AVG(DATEDIFF(next_order_date, OrderDate)) AS AvgDaysBetweenOrders
FROM (SELECT o1.CustomerID,
             o1.OrderDate,
             LEAD(o1.OrderDate) OVER (PARTITION BY o1.CustomerID ORDER BY o1.OrderDate) AS next_order_date
      FROM Orders o1) AS NewQuery
WHERE next_order_date IS NOT NULL
GROUP BY CustomerID;


-- Q9: List the top 5 customers who have spent the most on pizza, including CustomerID, TotalSpent, and Rank. Use window functions to rank the customers.

SELECT CustomerID,
       SUM(TotalAmount) AS TotalSpent,
       RANK() OVER (ORDER BY SUM(TotalAmount) DESC) AS Rank_no
FROM Orders
GROUP BY CustomerID
LIMIT 5;

-- Q10: Identify the pizzas that are ordered the most frequently, including PizzaID, PizzaName, and TotalQuantityOrdered. Use a subquery to aggregate the data.

SELECT 
    P.PizzaID,
    P.Name AS PizzaName,
    SUM(oi.Quantity) AS TotalQuantityOrdered
FROM pizzas P
JOIN orderitems OI ON p.pizzaid = oi.PizzaID
GROUP BY PizzaID , PizzaName;


-- Q11. Identify the top 5 states with the highest total revenue generated from customer orders. For each state, include the total number of customers and the total revenue.

SELECT 
    C.state,
    COUNT(c.CustomerID) AS cst_count,
    SUM(O.TotalAmount) AS total_revenue
FROM
    customers AS C
        JOIN
    orders AS O ON O.CustomerID = C.CustomerID
GROUP BY State
ORDER BY total_revenue DESC
LIMIT 5; 

-- Q12. Find all the details for a specific customer, including their full name, email address, phone number, and the total amount they have spent on orders. (CustomerID = 78)

SELECT 
    C.CustomerID,
    CONCAT(C.FirstName, ' ', C.LastName) AS FullName,
    C.Email,
    C.PhoneNumber,
    COALESCE(SUM(O.TotalAmount), 0) AS TotalAmountSpent
FROM
    customers AS C
LEFT JOIN 
    orders AS O ON C.CustomerID = O.CustomerID
WHERE 
    C.CustomerID = 78
GROUP BY 
    C.CustomerID, C.FirstName, C.LastName, C.Email, C.PhoneNumber;






